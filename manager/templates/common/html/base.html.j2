{% from 'common/html/modals.html.j2' import confirmModal, newAssetModal, messageModal, newFileModal, addPowerRuleModal -%}

{% set tabs = [
    ('Playback', 'playback', 'Default asset duration', 'play'),
    ('Audio', 'audio', 'Default output device, Volume, Mute', 'speaker'),
    ('Display', 'display', 'Resolution, Orientation, Window positioning', 'display'),
    ('Network', 'network', 'Hostname, Netplan', 'ethernet'),
    ('Updates', 'updates', 'APT', 'arrow-repeat'),
    ('Security', 'security', 'Password', 'shield-lock'),
    ('Scheduled actions', 'cron', 'Cron-based power scheduler', 'alarm'),
    ('Backup and restore', 'backup', 'Backup, restore, reset system', 'clock-history'),
    ('Info', 'info', 'System info', 'info-circle')
] -%}

{% macro _add_scripts() -%}
    {% for path in varargs -%}
    <script src="{{url_for('static', path=path)}}"></script>
    {% endfor -%}
{% endmacro -%}

{% macro _add_stylesheets() -%}
    {% for path in varargs -%}
    <link rel="stylesheet" href="{{url_for('static', path=path)}}">
    {% endfor -%}
{% endmacro -%}

{% macro menu_select(name, src) -%}
    {% if (request.url|string).endswith(src) -%}
    <span class="text-light text-bg-primary fw-bold px-2 rounded">{{name}}</span>
    {% else -%}
    {{name}}
    {% endif -%}
{% endmacro -%}

{% set bs_theme = ['light', 'dark'][1] -%}

<!DOCTYPE html>
<html lang="en">

<head>
    <title>UniTotem Manager</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link id="favicon" rel="icon" type="image/x-icon" href="/static/favicon.ico">
    {# <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" /> <!-- Font Awesome --> #}
    {{_add_stylesheets("/bootstrap.min.css", "/bootstrap-icons.css") -}}
    <style>html {font-size: 14px} .hdr { background-color: #7431F9; color: white; }</style>
    <style>
        {%- block custom_style %}{% endblock custom_style -%}
    </style>
</head>

<body data-bs-theme="{{bs_theme}}">

    {{confirmModal()}}
    {{newAssetModal() if (request.url|string).endswith('/')}}
    {{messageModal()}}
    {{newFileModal() if (request.url|string).endswith('network')}}
    {{addPowerRuleModal() if (request.url|string).endswith('cron')}}

    <nav class="navbar navbar-dark hdr">
        <div class="container-fluid gap-2">
            <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasResponsive"><span class="navbar-toggler-icon"></span></button>
            <a class="navbar-brand p-0" href="/"><h1 class="my-auto"><b>U<span class="d-none d-md-inline">niTotem</span></b></h1></a>
            <button class="btn btn-outline-light ms-auto" type="button" data-bs-title="Do you want to reboot UniTotem?" data-bs-positive-btn="Reboot" data-bs-positive-action="sendCommand('power/reboot')" data-bs-negative-btn="No" data-bs-toggle="modal" data-bs-target="#confirmModal">
                <i class="bi bi-bootstrap-reboot"></i><span class="d-none d-sm-inline"> Reboot</span>
            </button>
            <button class="btn btn-outline-light" type="button" data-bs-title="Do you want to shutdown UniTotem?" data-bs-positive-btn="Shutdown" data-bs-positive-action="sendCommand('power/shutdown')" data-bs-negative-btn="No" data-bs-toggle="modal" data-bs-target="#confirmModal">
                <i class="bi bi-power"></i><span class="d-none d-sm-inline"> Shutdown</span>
            </button>
            <button class="btn btn-outline-light" type="button" onclick="document.cookie='access-token=;max-age=0;path=/;';location.reload();">
                <i class="bi bi-door-open"></i><span class="d-none d-sm-inline"> Logout</span>
            </button>
        </div>
    </nav>

    <div class="container-fluid">
        <div class="row">
            <div class="offcanvas-lg offcanvas-start" tabindex="-1" id="offcanvasResponsive" style="width: 16rem;">
                <div class="offcanvas-header">
                    <h1 style="color: #7431F9;">UniTotem</h1>
                </div>
                <div class="offcanvas-body p-0">
                    <div class="col p-lg-3 mt-3 mt-lg-0" style="flex: 0 0 auto;">
                        <div class="row m-2 ms-0 mb-4">
                            <a href="/" class="text-reset text-decoration-none"><i class="bi bi-list-task text-primary-emphasis"></i>&nbsp;&nbsp;&nbsp;{{menu_select('Scheduler', '/')}}</a>
                        </div>
                        <div class="row m-2 ms-0">
                            <a href="/settings" class="text-reset text-decoration-none"><i class="bi bi-sliders text-primary-emphasis"></i>&nbsp;&nbsp;&nbsp;{{menu_select('Settings', '/settings')}}</a>
                        </div>
                        {%- for name, tab, _, icon in tabs %}
                        <div class="row m-1 mt-2 ms-3">
                            <a href="/settings/{{tab}}" class="text-reset text-decoration-none"><i class="bi bi-{{icon}} text-primary-emphasis"></i>&nbsp;&nbsp;&nbsp;{{menu_select(name, '/settings/' ~ tab)}}</a>
                        </div>
                        {%- endfor %}
                    </div>
                </div>
            </div>

            <main class="container-fluid col mt-lg-4 mt-1 mb-4">
                {% block main_content %}{% endblock main_content %}
            </main>
        </div>
    </div>

    <div class="toast-container position-absolute bottom-0 end-0 p-3"></div>

    {% set display = (disp_size.width|string + 'x' + disp_size.height|string) if disp_size else 'Not connected' -%}
    <footer class="fixed-bottom text-center border-top bg-body" style="width:100%; z-index:1000;">
        <h6 class="my-1" width="100%">
            <small class="text-muted">
                <a href="https://github.com/a13ssandr0/unitotem">
                <i class="bi bi-github"></i> Unitotem</a> {{ ut_vers }} by a13ssandr0 | Logged in as {{ logged_user }} | Display: <span id="display_bounds">{{ display }}</span> | Used {{disk_used}} of {{disk_total}}
            </small>
        </h6>
    </footer>

    {{_add_scripts('bootstrap.bundle.min.js', 'jquery.min.js', *ext_scripts)}}

    <script>
        const toast_container = $('.toast-container');

        function sendCommand(target, args) {
            if(args === undefined) args = {};
            args.target = target
            ws.send(JSON.stringify(args));
        }

        function notification(title, message, duration=5000, subtitle=''){
            let toast = 
                $('<div class="toast" role="alert"></div>').append(
                    $('<div class="toast-header"></div>').append(
                        {# $('<img src="..." class="rounded me-2" alt="...">'), #}
                        $('<strong class="me-auto"></strong>').html(title),
                        $('<small class="text-body-secondary"></small>').html(subtitle),
                        $('<button type="button" class="btn-close" data-bs-dismiss="toast"></button>'),
                    ),
                    $('<div class="toast-body"></div>').html(message)
                )
            toast_container.prepend(toast);
            new bootstrap.Toast(toast, {autohide: !!duration, delay: duration}).show();
        }

        {% block js %}{% endblock js %}

        var connect_retry = 0;

        function connect() {
            const loc = window.location;
            var _ws = new WebSocket(`w${(loc.protocol === 'https:')?'s':''}s://${loc.host}/ws`);
            _ws.onopen = event => {
                // PAGE INIT
                {{ init_cmds|flatten|safe }}
                    .forEach(cmd => sendCommand(cmd));
            };
            _ws.onmessage = event => {
                const data = JSON.parse(event.data);
                if (data.target == 'settings/hostname')
                    document.title = data.hostname + ' - UniTotem Manager';
                if (data.hasOwnProperty('error')){
                    messageModal.find('.modal-title').text('Error');
                    messageModal.find('.modal-body h6').text(data.target + ' returned ' + data.error);
                    messageModal.find('.modal-body code').text(data.extra);
                    new bootstrap.Modal(messageModal).show();
                    return;
                }
                switch (data.target) {
                    
                    {% block recv_cmds %}{% endblock recv_cmds %}

                    case 'error':
                        messageModal.find('.modal-title').text('Error');
                        messageModal.find('.modal-body h6').text('Request returned ' + data.error);
                        messageModal.find('.modal-body code').text(data.extra);
                        new bootstrap.Modal(messageModal).show();
                        break;

                    case 'connected':
                        connect_retry=0;
                        break;

                    case 'reload':
                        location.reload();
                        break;

                    default:
                        break;
                }
                
            };

            _ws.onclose = e => {
                connect_retry++;
                console.log('Socket is closed. Reconnect will be attempted in', connect_retry, 'second(s).', e.reason);
                if (e.reason == 'Not Authenticated') location.reload();
                setTimeout(() => ws=connect(), connect_retry*1000);
            };

            _ws.onerror = err => {
                console.error('Socket encountered error. Closing socket');
                _ws.close();
            };

            return _ws;
        }

        var ws = connect();

        const messageModal = $('#messageModal');
        const messageModalTitle = $('#messageModal .modal-title');
        const messageModalPosBtn = $('#messageModal .btn-danger');
        const messageModalNegBtn = $('#messageModal .btn-outline-primary');
        $('#confirmModal').on('show.bs.modal', event => {
            const button = event.relatedTarget;
            messageModalTitle.text(button.attr('data-bs-title'));
            messageModalPosBtn.html(button.attr('data-bs-positive-btn'))
                .attr("onclick", button.attr('data-bs-positive-action'));
            messageModalNegBtn.html(button.attr('data-bs-negative-btn'))
                .attr("onclick", button.attr('data-bs-negative-action'));
        });
    </script>
</body>

</html>