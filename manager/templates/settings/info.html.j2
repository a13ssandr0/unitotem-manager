{% extends "settings.html.j2" %}

{% block content %}
<h4>System Info <span class="ms-4 text-muted" style="font-size: 12px;" id="uptime"></span></h4>

<div class="row">
    <div class="col-12 col-lg-6 mb-2">
        <h5 class="mt-3 mb-1">CPU</h5>
        <canvas id="cpu-canvas"></canvas>
        
        
        <h5 class="mt-3 mb-1">Temperatures</h5>
        <small>
            <table class="table">
                <thead>
                    <tr>
                        <th class="ps-3" scope="col">Sensor</th>
                        <th scope="col" class="col-1 text-end">Actual</th>
                        <th scope="col" class="col-1 text-end">High</th>
                        <th scope="col" class="col-1 text-end">Critical</th>
                    </tr>
                </thead>
                <tbody id="temp-table">
                    {% for dev, sensors in temp_devs.items() %}
                    <tr>
                        <th scope="row" colspan="5" class="table-active">{{dev}}</th>
                    </tr>
                    {% for temp in sensors %}
                    {# I don't think we need to display threshold values higher than
                     # solder reflow temperature, let alone temperatures hotter than
                     # THE SUN!
                     # Samsung nvme ssds report a high/critical temperature of 65261.85 째C
                     # Considering the Sun is at 5500 째C, we would have a problem if we
                     # reached this temperature, actually 59761.85 problems.
                    #}
                    {% set th, tc = temp.high, temp.critical %}
                    {% if th == None or th > 300 %}{% set th = '' %}{% endif %}
                    {% if tc == None or tc > 300 %}{% set tc = '' %}{% endif %}
                    <tr>
                        <td class="ps-3">{{temp.label}}</td>
                        <td class="text-end text-nowrap" id="temp-{{dev|replace(' ','')}}-{{temp.label|replace(' ','') or loop.index0}}" data-th="{{th or 'NaN'}}"></td>
                        <td class="text-end text-nowrap">{{th|round|int~' 째C' if th}}</td>
                        <td class="text-end text-nowrap">{{tc|round|int~' 째C' if tc}}</td>
                    </tr>
                    {% endfor %}
                    {% endfor %}
                </tbody>
            </table>
        </small>
    </div>
    <div class="col-12 col-lg-6 mb-2">
        <h5 class="mt-3 mb-1">RAM</h5>
        <div class="progress">
            <div id="progress-used" class="progress-bar bg-success" role="progressbar" style="width: 0%"></div>
            <div id="progress-buffer" class="progress-bar" role="progressbar" style="width: 0%"></div>
            <div id="progress-cache" class="progress-bar bg-warning" role="progressbar" style="width: 0%"></div>
        </div>
        <div class="row">
            <div class="col-3">
                <span class="badge rounded-pill text-bg-success">
                    <small id="pill-used"></small>
                </span>
                <small> Used</small>
            </div>
            <div class="col-3">
                <span class="badge rounded-pill text-bg-primary">
                    <small id="pill-buffer"></small>
                </span>
                <small> Buffer</small>
            </div>
            <div class="col-3">
                <span class="badge rounded-pill text-bg-warning">
                    <small id="pill-cache"></small>
                </span>
                <small> Cache</small>
            </div>
            <div class="col-3">
                <span class="badge rounded-pill text-body-emphasis bg-body-secondary">
                    <small>{{ram_tot}}</small>
                </span>
                <small> Total</small>
            </div>
        </div>


        <h5 class="mt-3 mb-1">Disks</h5>
        {% for disk in disks if disk.size recursive %}
        <div class="d-flex">
            <div class="pt-2 pe-2" style="padding-left: {{loop.depth0 * 0.5}}em !important"><small>
                    <span>{{disk.name}}</span>
                    {% if disk.fstype %}
                    <span class="badge rounded-pill text-bg-secondary">{{disk.fstype}}</span>
                    {% endif %}
                </small></div>
            <div class="pt-2 pe-2 flex-grow-1">
                {% if disk.fsuse_perc != None %}
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: {{disk.fsuse_perc}}%">
                        {{disk.fsused|filesizeformat(True)}}/{{disk.size|filesizeformat(True)}}
                    </div>
                </div>
                <small>{{disk.mountpoint}}</small>
                {% else %}
                <div class="text-end"><small>{{disk.size|filesizeformat(True)}}</small></div>
                {% endif %}
            </div>
        </div>
        {% if disk.children != None %}{{loop(disk.children)}}{% endif %}
        {% endfor %}
        
        
        {% if fan_devs %}    
        <h5 class="mt-3 mb-1">Fans</h5>
        {% for dev, fans in fan_devs.items() %}
        <small class="fw-semibold">{{dev}}</small>
        <ul class="list-group list-group-flush">
            {% for fan in fans %}
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <small>{{fan.label or 'fan'~loop.index}}</small>
                <small id="fan-{{dev|replace(' ','')}}-{{fan.label|replace(' ','') or loop.index0}}"></small>
            </li>
            {% endfor %}
        </ul>
        {% endfor %}
        {% endif %}
        
        
        {% if has_battery %}    
        <h5 class="mt-3 mb-1">Battery</h5>
        <div class="progress">
            <div id="bat-perc" class="progress-bar" role="progressbar" style="width: 0%"></div>
        </div>
        <small>Time left: <span id="bat-time"></span> | <span id="bat-chg"></span></small>
        {% endif %}
    </div>
</div>


{% endblock content %}


{% set ext_scripts = ['chart.umd.min.js'] %}

<script type="text/javascript" charset="utf-8">
{% block js %}

const uptime = $('#uptime');
const temp_table = $('#temp-table');
const prog_used = $('#progress-used');
const prog_buffer = $('#progress-buffer');
const prog_cache = $('#progress-cache');
const pill_used = $('#pill-used');
const pill_buffer = $('#pill-buffer');
const pill_cache = $('#pill-cache');

{% if has_battery %}    
const bat_perc = $('#bat-perc');
const bat_time = $('#bat-time');
const bat_chg = $('#bat-chg');
{% endif %}

{% if has_fans %}
const fans_list = $('#fans-list');
{% endif %}

const chartColors = {
    red: 'rgb(255, 99, 132)',
    orange: 'rgb(255, 159, 64)',
    yellow: 'rgb(255, 205, 86)',
    green: 'rgb(75, 192, 192)',
    blue: 'rgb(54, 162, 235)',
    purple: 'rgb(153, 102, 255)',
    grey: 'rgb(201, 203, 207)'
};
const chartColors_transparent = {
    red: 'rgba(255, 99, 132, 0.5)',
    orange: 'rgba(255, 159, 64, 0.5)',
    yellow: 'rgba(255, 205, 86, 0.5)',
    green: 'rgba(75, 192, 192, 0.5)',
    blue: 'rgba(54, 162, 235, 0.5)',
    purple: 'rgba(153, 102, 255, 0.5)',
    grey: 'rgba(201, 203, 207, 0.5)'
};


const barChartData = {
    labels: ['CPU'{% for i in range(cpu_count)%}, '{{"Core "~i}}'{% endfor -%}],
    datasets: [{
        label: 'Low (Nice)',
        backgroundColor: chartColors_transparent.blue,
        borderColor: chartColors.blue,
        borderWidth: 1,
        stack: 'stack0',
        data: []
    }, {
        label: 'Normal (User)',
        backgroundColor: chartColors_transparent.green,
        borderColor: chartColors.green,
        borderWidth: 1,
        stack: 'stack0',
        data: []
    }, {
        label: 'Kernel',
        backgroundColor: chartColors_transparent.red,
        borderColor: chartColors.red,
        borderWidth: 1,
        stack: 'stack0',
        data: []
    }, {
        label: 'IRQ',
        backgroundColor: chartColors_transparent.yellow,
        borderColor: chartColors.yellow,
        borderWidth: 1,
        stack: 'stack0',
        data: []
    }, {
        label: 'Soft IRQ',
        backgroundColor: chartColors_transparent.purple,
        borderColor: chartColors.purple,
        borderWidth: 1,
        stack: 'stack0',
        data: []
    }, {
        label: 'IO Wait',
        backgroundColor: chartColors_transparent.grey,
        borderColor: chartColors.grey,
        borderWidth: 1,
        stack: 'stack0',
        data: []
    }]
};

window.onload = () => {
    window.myBar = new Chart($("#cpu-canvas")[0].getContext("2d"), {
        type: 'bar',
        data: barChartData,
        options: {
            responsive: true,
            legend: { position: 'top' },
            scales: { y: { min: 0, max: 100 } }
        }
    });
};

function human_readable_size(size, precision=3){
    var unit;
    for(unit of ['B','KiB','MiB','GiB','TiB']){
        if (size < 1024.0)
            break;
        size /= 1024.0;
    }
    return size.toPrecision(precision) + unit;
}

{% endblock js %}


{% block recv_cmds %}
case 'settings/info':
    uptime.html(`Uptime: ${data.uptime}`);

    barChartData.datasets.forEach(dataset => {dataset.data = []});
    data.cpu.forEach((val, i) =>{
        barChartData.datasets[0].data.push(val.nice);
        barChartData.datasets[1].data.push(val.user);
        barChartData.datasets[2].data.push(val.system);
        barChartData.datasets[3].data.push(val.irq);
        barChartData.datasets[4].data.push(val.softirq);
        barChartData.datasets[5].data.push(val.iowait);
    })
    window.myBar.update();

    prog_used.css('width', data.vmem.used/data.vmem.total*100 + '%');
    pill_used.html(human_readable_size(data.vmem.used));

    prog_buffer.css('width', data.vmem.buffers/data.vmem.total*100 + '%');
    pill_buffer.html(human_readable_size(data.vmem.buffers));

    prog_cache.css('width', data.vmem.cached/data.vmem.total*100 + '%');
    pill_cache.html(human_readable_size(data.vmem.cached));
    
    {% if has_battery %}
    bat_perc.css('width', data.battery.percent + '%');
    bat_perc.html(data.battery.percent + '%');
    bat_perc.toggleClass('bg-danger', !data.battery.power_plugged && data.battery.percent<=15)
    bat_perc.toggleClass('bg-warning text-dark', !data.battery.power_plugged && 15<data.battery.percent && data.battery.percent<=25)
    bat_perc.toggleClass('progress-bar-striped progress-bar-animated', data.battery.power_plugged && data.battery.percent<100)
    bat_perc.toggleClass('bg-success', data.battery.power_plugged && data.battery.percent===100)

    bat_time.html(new Date(data.battery.secsleft*1000).toISOString().substring(11, 19));

    bat_chg.html((data.battery.power_plugged && data.battery.percent===100)?'Charged':data.battery.power_plugged?'Charging':'Discharging');
    {% endif %}

    {% if fan_devs %}
    data.fans.forEach((fan, i) => $('#' + fan[0]).html(fan[1] + ' rpm'));
    {% endif %}

    data.temperatures.forEach((temp, i) => {
        let row = $('#' + temp[0]).html(Math.round(temp[1]) + ' 째C');
        row.toggleClass('text-danger', temp[1] > row.data('th'));
    });
    break;
{% endblock recv_cmds %}
</script>