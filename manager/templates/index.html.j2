{% extends 'common/html/base.html.j2' -%}


<style>
    {% block custom_style %}
        table { table-layout: fixed; word-wrap: break-word; }
        .asset-list-handle { cursor: move; cursor: -webkit-grabbing; }
        /* .overlay { position: fixed; width: 100%; height: 100%; top: 0; left: 0; right: 0; bottom: 0;}
        .dim { background-color: rgba(0,0,0,0.5);}
        .hover-shake {animation: shake 2s; animation-iteration-count: infinite; animation-direction: alternate;}
        .anim-rev {animation-direction: alternate-reverse !important;}
        @keyframes shake { 0%{ transform: translate(1px, 1px) rotate(0deg); } 10%{ transform: translate(-1px, -2px) rotate(-1deg); } 20%{ transform: translate(-3px, 0px) rotate(1deg); } 30%{ transform: translate(3px, 2px) rotate(0deg); } 40%{ transform: translate(1px, -1px) rotate(1deg); } 50%{ transform: translate(-1px, 2px) rotate(-1deg); } 60%{ transform: translate(-3px, 1px) rotate(0deg); } 70%{ transform: translate(3px, 1px) rotate(-1deg); } 80%{ transform: translate(-1px, -1px) rotate(1deg); } 90%{ transform: translate(1px, 2px) rotate(0deg); } 100%{ transform: translate(1px, -2px) rotate(-1deg); }} */
    {% endblock custom_style %}
</style>

   
<main><!-- ondragenter="$('overlay').show()"> -->
    <!-- <div id="overlay" class="overlay dim" style="z-index: 10000; display: none;">
        <div id="dnd-interceptor" class="overlay" ondragover="event.preventDefault(); event.stopPropagation();" ondragleave="$('overlay').hide()"></div>
        <div class="position-absolute top-50 start-50 translate-middle">
            <div class="row">
                <div class="col" style="font-size: 10vw; color: white; margin: -0.5vw; transform: rotate(-30deg);"><div class="hover-shake"><i class="bi bi-image"></i></div></div>
                <div class="col" style="font-size: 10vw; color: white; margin: -0.5vw; transform: translateY(-3vh);"><div class="hover-shake anim-rev"><i class="bi bi-music-note-beamed"></i></div></div>
                <div class="col" style="font-size: 10vw; color: white; margin: -0.5vw; transform: rotate( 30deg);"><div class="hover-shake"><i class="bi bi-film"></i></div></div>
            </div>
            <div class="row mt-3"><h4 class="text-center text-light"><b>Drop file(s) here to upload</b></h4></div>
        </div>
    </div> -->
    {% block main_content %}
    <div class="row">
        <div class="col-lg-4 pe-lg-2 order-1 order-lg-12">
            <div class="hstack gap-2 mb-1">
                <h5>Files</h5>
                <div class="ms-auto">
                    <div class="btn-group" role="group">
                        <button type="button" title="Delete files" id="delete_all_btn" class="btn btn-sm btn-outline-danger"><i class="bi bi-trash"></i></button>
                        <button type="button" title="Download files" id="download_all_btn" class="btn btn-sm btn-outline-secondary"><i class="bi bi-download"></i></a>
                        <button type="button" title="Add to list" id="add_all_btn" class="btn btn-sm btn-outline-secondary"><i class="bi bi-box-arrow-in-right"></i></button>
                    </div>
                </div>
                <button type="button" class="btn btn-sm btn-success" onclick="fileSelector.click()" style="width: 6.7em;"><i class="bi bi-file-earmark-arrow-up"></i> Upload</button>
            </div>
            <div class="progress" id="upload-progress" style="display: none;">
                <div class="progress-bar progress-bar-striped progress-bar-animated" id="upload-progress-bar" role="progressbar" style="width: 0%">0%</div>
            </div>
            <ol id="file-list" class="list-group list-group-flush border-top border-bottom mt-lg-5"></ol>
        </div>
        <div class="col-lg-8 mt-4 mt-lg-0 order-12 order-lg-1">
            <div class="hstack gap-2">
                <h5>Playlist</h5>
                <div class="ms-auto">
                    <div class="btn-group" role="group">
                        <button type="button" title="Previous asset" class="btn btn-sm btn-outline-primary" onclick="sendCommand('scheduler/goto/back')"><i class="bi bi-skip-backward"></i></button>
                        <button type="button" title="Reload asset" class="btn btn-sm btn-outline-primary" onclick="sendCommand('scheduler/goto')"><i class="bi bi-arrow-clockwise"></i></button>
                        <button type="button" title="Next asset" class="btn btn-sm btn-outline-primary" onclick="sendCommand('scheduler/goto/next')"><i class="bi bi-skip-forward"></i></button>
                    </div>
                </div>
                <button class="btn btn-sm btn-primary" type="button" data-bs-toggle="modal" data-bs-target="#newAssetModal" onclick="modal_input.label.text('New asset')"><i class="bi bi-plus-circle"></i> Add URL</button>
            </div>
            <div class="row">
                <table class="table table-hover mt-2">
                    <thead class="border-bottom">
                        <tr name="asset-row">
                            <th scope="col" style="width: 2em;"></th>
                            <th scope="col">URL</th>
                            <th scope="col" style="width: 8rem;">Duration</th>
                            <th scope="col" style="width: 10em;"></th>
                        </tr>
                    </thead>
                    <tbody id="asset_table"></tbody>
                </table>
            </div>
        </div>
    </div>
    {% endblock main_content %}
</main>
    
{% set ext_scripts = ['Sortable.min.js', 'jquery.form.js'] %}
    
{% set init_cmds = [
    'scheduler/asset',
    'scheduler/asset/current',
    'scheduler/file',
    'settings/hostname',
    'settings/default_duration'
] %}

<script>
{% block js %}
    const asset_table = $('#asset_table');
    const modal_input = {
        parent: new bootstrap.Modal('#newAssetModal'),
        parentEl: $('#newAssetModal'),
        label: $('#newAssetModalLabel'),
        name: $('#modal_input_name'),
        url: $('#modal_input_url'),
        duration: $('#modal_input_duration'),
        fit_contain: $('#modal_fit_contain'),
        fit_contain_img: $('img.object-fit-contain'),
        fit_cover: $('#modal_fit_cover'),
        fit_fill: $('#modal_fit_fill'),
        bg_color: $('#modal_input_bg_color'),
        color_auto: $('#modal_input_color_auto'),
        ena_date: $('#modal_input_start'),
        dis_date: $('#modal_input_stop'),
        submit_btn: $('#add_asset_btn')
    }
    const upload_progress = $("#upload-progress");
    const progressbar = $("#upload-progress-bar");
    const fileSelector = $('<input type="file" name="files" multiple>')
        .on('change', () => {
            let files = fileSelector.prop('files');
            if (files.length > 0){
                $('<form></form>')
                    .append(fileSelector).ajaxSubmit({
                        url: "/api/scheduler/upload",
                        type: "POST",
                        dataType: "json",
                        beforeSend: function() {
                            upload_progress.show();
                            progressbar.css('width', '0%').html( '0%');
                        },
                        uploadProgress: function(event, position, total, perc) {
                            progressbar.css('width', perc + '%').html( perc + '%');
                        },
                        complete: function(xhr) {
                            upload_progress.hide();
                            progressbar.css('width', '0%').html( '0%');
                        },
                        error: function(xhr, textStatus, error){
                            messageModal.find('.modal-title').text(textStatus);
                            messageModal.find('.modal-body h6').text(`Request returned ${error}`);
                            messageModal.find('.modal-body code').text(JSON.stringify(xhr.responseJSON, null, 4));
                            new bootstrap.Modal(messageModal).show();
                        }
                    });
            }
        });
    
    sortable_list = Sortable.create(asset_table[0], {
        onUpdate: (event) => {sendCommand('scheduler/reorder', {from_i: event.oldIndex, to_i: event.newIndex});},
        handle: ".asset-list-handle"
    });

    function sendCommand(target, args) {
        if(args === undefined) args = {};
        args.target = target
        ws.send(JSON.stringify(args));
    }
    
    $('#delete_all_btn').click(() => {
        let checkedfiles = $('input[name="filecheck"]:checked');
        sendCommand('scheduler/delete_file', {files: [... checkedfiles.map((i,x) => $(x).attr('data-filename'))]});
        checkedfiles.each((i, e) => {e.checked = false});
    })
    $('#download_all_btn').click(() => {
        $('input[name="filecheck"]:checked').each((i,elem) => {
            let fname = $(elem).attr('data-filename');
            var link = document.createElement("a");
            link.download = fname;
            link.href = "/uploaded/" + fname;
            document.body.appendChild(link);
            link.click();
            link.remove();
            elem.checked = false;
        })
    })
    $('#add_all_btn').click(() => {
        let checkedfiles = $('input[name="filecheck"]:checked');
        sendCommand('scheduler/add_file', {items: [... checkedfiles.map((i,x) => $(x).attr('data-filename'))]});
        checkedfiles.each((i, e) => {e.checked = false});
    })

    modal_input.submit_btn.click(() => {
        if (modal_input.label.text().includes('New')){
            sendCommand('scheduler/add_url', { items: [{
                name: modal_input.name.val(),
                url: modal_input.url.val(),
                duration: modal_input.duration.val(),
                fit: $("[name=modal_fit_radio]:checked").val(),
                bg_color: modal_input.color_auto[0].checked?null:modal_input.bg_color.val(),
                ena_date: modal_input.ena_date.val(),
                dis_date: modal_input.dis_date.val()
            }]});
        } else {
            sendCommand('scheduler/asset/edit', {
                name: modal_input.name.val(),
                url: modal_input.url.val(),
                duration: modal_input.duration.val(),
                fit: $("[name=modal_fit_radio]:checked").val(),
                bg_color: modal_input.color_auto[0].checked?null:modal_input.bg_color.val(),
                ena_date: modal_input.ena_date.val(),
                dis_date: modal_input.dis_date.val(),
                uuid: modal_input.submit_btn.attr('data-uuid')
            });
        }
    });
    modal_input.parentEl[0].addEventListener('hidden.bs.modal', ()=>{
        modal_input.name.val('');
        modal_input.url.val('');
        modal_input.duration.val(modal_input.duration.attr('def-value'));
        modal_input.fit_contain[0].checked=true;
        modal_input.fit_contain_img.css('background-color', '#000000');
        modal_input.bg_color.val('#000000').enable(true);
        modal_input.color_auto[0].checked=false;
        modal_input.ena_date.val('');
        modal_input.dis_date.val('');
        modal_input.submit_btn.attr('data-uuid', '');
    })

    /* $('#dnd-interceptor').on('drop', event => {
        event.preventDefault();
        event.stopPropagation();

        if (event.dataTransfer.items) {
            // Use DataTransferItemList interface to access the file(s)
            event.dataTransfer.items.forEach((item, i) => {
                // If dropped items aren't files, reject them
                if (item.kind === 'file') {
                    const file = item.getAsFile();
                    console.log(`… file[${i}].name = ${file.name}`);
                }
            });
        } else {
            // Use DataTransfer interface to access the file(s)
            event.dataTransfer.files.forEach((file, i) => {
                console.log(`… file[${i}].name = ${file.name}`);
            });
        }
    }); */

{% endblock js %}


{% block recv_cmds %}
case 'scheduler/asset':
    asset_table.empty();
    data.items.forEach((item, i) => {
        let icon = (()=>{
            if (item.media_type == 1)
                return 'bi-image';
            else if (item.media_type == 2)
                return 'bi-film';
            else if (item.media_type == 3)
                return 'bi-music-note-beamed';
            else if (item.url.startsWith('file:'))
                return 'bi-file-earmark';
            else
                return 'bi-globe';
        })();
        
        asset_table.append(
            $('<tr style="min-height:3rem;max-height:3rem;"></tr>').attr('id', item.uuid)
                .toggleClass('table-active', item.uuid == data.current)
                .append(
                    $('<td class="align-middle asset-list-handle"></td>')
                    .append(
                        $('<i class="bi" style="color: grey;"></i>')
                            .addClass(icon)
                            .attr('id', 'icon-' + item.uuid)
                            .mouseover((e) => $(e.target).removeClass(icon).addClass('bi-arrow-down-up'))
                            .mouseout((e) => $(e.target).removeClass('bi-arrow-down-up').addClass(icon))
                    ),
                    $('<td class="align-middle py-0"></td>').append(
                        $('<span class="d-block text-truncate"></span>').html((!!item.name)?item.name:item.url),
                        $('<span class="d-block text-truncate text-muted" style="font-size:0.75rem"></span>').html((!!item.name)?item.url:'')
                    ),
                    $('<td class="align-middle" style="font-size:0.75rem"></td>')
                        .html((()=>{
                            if (!item.duration)
                                return 'Forever';
                            let [h,m,s] = new Date(item.duration * 1000).toISOString().slice(11, 19).split(':');
                            if (h>0) h+=' h'; else h='';
                            if (m>0) m+=' min'; else m='';
                            return `${h} ${m} ${s} sec`;
                        })()),
                    $('<td class="align-middle"></td>').append(
                        $('<div class="hstack gap-2"></div>').append(
                            $('<div class="form-check form-switch position-relative"></div>').append(
                                $('<input class="form-check-input" type="checkbox" role="switch">')
                                    .attr('title', (item.enabled?'Dis':'En') + 'able asset')
                                    .prop('checked', item.enabled)
                                    .change(() => sendCommand('scheduler/asset/edit', {uuid: item.uuid, state: !item.enabled})),
                                (()=>{
                                    if (!item.ena_date && !item.dis_date) return;
                                    return $('<i class="position-absolute top-100 start-0 translate-middle bi bi-clock" style="font-size:0.75rem" data-bs-toggle="tooltip" data-bs-placement="bottom"></i>')
                                        .attr('data-bs-title', 'Enabling/disabling scheduled');
                                })()
                            ),
                            $('<div class="btn-group" role="group"></div>').append(
                                $('<button type="button" title="Delete asset" class="btn btn-sm btn-outline-danger"><i class="bi bi-trash"></i></button>')
                                    .click(() => sendCommand('scheduler/delete', {uuid: item.uuid})),
                                $('<button type="button" title="Edit asset" class="btn btn-sm btn-outline-warning"><i class="bi bi-pencil"></i></button>')
                                    .click(() => {
                                        modal_input.label.text('Edit asset');
                                        modal_input.name.val(item.name);
                                        modal_input.url.val(item.url);
                                        modal_input.duration.val(item.duration);
                                        switch (item.fit){
                                            default:
                                            case 0:
                                                modal_input.fit_contain[0].checked=true;
                                                break;
                                            case 1:
                                                modal_input.fit_cover[0].checked=true;
                                                break;
                                            case 2:
                                                modal_input.fit_cover[0].checked=true;
                                                break;
                                        }
                                        if (!item.bg_color){
                                            modal_input.color_auto[0].checked = true;
                                            modal_input.bg_color.val('#000000').enable(false);
                                            modal_input.fit_contain_img.css('background-color', '#000000');
                                        } else {
                                            modal_input.color_auto[0].checked = false;
                                            modal_input.bg_color.val(item.bg_color).enable(true);
                                            modal_input.fit_contain_img.css('background-color', item.bg_color);
                                        }
                                        modal_input.ena_date.val(item.ena_date);
                                        modal_input.dis_date.val(item.dis_date);
                                        modal_input.submit_btn.attr('data-uuid', item.uuid);
                                        modal_input.parent.show();
                                    }),
                                $('<button type="button" title="Show asset" class="btn btn-sm btn-outline-secondary"><i class="bi bi-box-arrow-in-right"></i></button>')
                                    .click(() => sendCommand('scheduler/goto', {index: item.uuid}))
                            )
                        )
                    )
                )
        )
    });
    break;

case 'scheduler/asset/current':
    asset_table.children().each((i,element) => {
        $(element).toggleClass('table-active', element.id == data.uuid);
    });
    break;

case 'scheduler/file':
    const list = $('#file-list');
    list.empty();
    Object.entries(data.files).forEach(([fname, fdata], i) => {
        list.append(
            $('<li class="list-group-item list-group-item-action d-flex p-1" style="min-height:3rem;max-height:3rem;"></li>').append(
                $('<input class="form-check-input" style="min-width: 1em;" type="checkbox" name="filecheck">')
                    .attr('data-filename', fdata.filename),
                $('<div class="ms-2 me-auto flex-grow-1" style="max-width:93%"></div>').append(
                    $('<span class="d-block text-truncate"></span>').html(fdata.filename),
                    $('<span class="d-block text-truncate text-muted" style="font-size:0.75rem"></span>')
                        .html('Duration: ' + (fdata.duration ?? (fdata.duration_s+'s')) + ' | Size: ' + fdata.size)
                ).click(function() {
                    $(this).siblings('input').click();
                })
            )
        );
    });
    break;

case 'settings/default_duration':
    modal_input.duration.val(data.duration).attr('def-value', data.duration);
    break;

case 'settings/display/bounds':
    $('#display_bounds').html( 
        (data.bounds.width && data.bounds.height)?
            `${data.bounds.width}x${data.bounds.height}`:
            'Not connected');
    break;
{% endblock recv_cmds %}
</script>
