{% extends 'common/html/base.html.j2' -%}


<style>
    {% block custom_style %}
        table { table-layout: fixed; word-wrap: break-word; }
        input::-webkit-outer-spin-button, input::-webkit-inner-spin-button { -webkit-appearance: none; appearance: none; margin: 0; } /* Chrome, Safari, Edge, Opera */
        input[type=number] { -moz-appearance: textfield; appearance: textfield; } /* Firefox */
        .asset-list-handle { cursor: move; cursor: -webkit-grabbing; }
        /* .overlay { position: fixed; width: 100%; height: 100%; top: 0; left: 0; right: 0; bottom: 0;}
        .dim { background-color: rgba(0,0,0,0.5);}
        .hover-shake {animation: shake 2s; animation-iteration-count: infinite; animation-direction: alternate;}
        .anim-rev {animation-direction: alternate-reverse !important;}
        @keyframes shake { 0%{ transform: translate(1px, 1px) rotate(0deg); } 10%{ transform: translate(-1px, -2px) rotate(-1deg); } 20%{ transform: translate(-3px, 0px) rotate(1deg); } 30%{ transform: translate(3px, 2px) rotate(0deg); } 40%{ transform: translate(1px, -1px) rotate(1deg); } 50%{ transform: translate(-1px, 2px) rotate(-1deg); } 60%{ transform: translate(-3px, 1px) rotate(0deg); } 70%{ transform: translate(3px, 1px) rotate(-1deg); } 80%{ transform: translate(-1px, -1px) rotate(1deg); } 90%{ transform: translate(1px, 2px) rotate(0deg); } 100%{ transform: translate(1px, -2px) rotate(-1deg); }} */
    {% endblock custom_style %}
</style>

   
<main><!-- ondragenter="$('overlay').show()"> -->
    <!-- <div id="overlay" class="overlay dim" style="z-index: 10000; display: none;">
        <div id="dnd-interceptor" class="overlay" ondragover="event.preventDefault(); event.stopPropagation();" ondragleave="$('overlay').hide()"></div>
        <div class="position-absolute top-50 start-50 translate-middle">
            <div class="row">
                <div class="col" style="font-size: 10vw; color: white; margin: -0.5vw; transform: rotate(-30deg);"><div class="hover-shake"><i class="bi bi-image"></i></div></div>
                <div class="col" style="font-size: 10vw; color: white; margin: -0.5vw; transform: translateY(-3vh);"><div class="hover-shake anim-rev"><i class="bi bi-music-note-beamed"></i></div></div>
                <div class="col" style="font-size: 10vw; color: white; margin: -0.5vw; transform: rotate( 30deg);"><div class="hover-shake"><i class="bi bi-film"></i></div></div>
            </div>
            <div class="row mt-3"><h4 class="text-center text-light"><b>Drop file(s) here to upload</b></h4></div>
        </div>
    </div> -->
    {% block main_content %}
    <div class="row">
        <div class="col-lg-4 pe-lg-2">
            <div class="hstack gap-2">
                <h5>Files</h5>
                <div class="ms-auto">
                    <div class="btn-group" role="group">
                        <button type="button" title="Delete files" onclick="sendCommand('scheduler/delete_file', {files: checkedfiles}); uncheckAll()" class="btn btn-sm btn-outline-danger"><i class="bi bi-trash"></i></button>
                        <button type="button" title="Download files" onclick="downloadFiles(checkedfiles); uncheckAll()" class="btn btn-sm btn-outline-secondary"><i class="bi bi-download"></i></a>
                        <button type="button" title="Add to list" onclick="sendCommand('scheduler/asset', {items: checkedfiles}); uncheckAll()" class="btn btn-sm btn-outline-secondary"><i class="bi bi-box-arrow-in-right"></i></button>
                    </div>
                </div>
                <button type="button" class="btn btn-sm btn-success" onclick="fileSelector.click()" style="width: 6.7em;"><i class="bi bi-file-earmark-arrow-up"></i> Upload</button>
            </div>
            <div class="progress" id="upload-progress" style="display: none;">
                <div class="progress-bar progress-bar-striped progress-bar-animated" id="upload-progress-bar" role="progressbar" aria-label="Animated striped example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%">0%</div>
            </div>
            <ol id="file-list" class="list-group"></ol>
        </div>
        <div class="col-lg-8 mt-4 mt-lg-0">
            <div class="hstack gap-2">
                <h5>Playlist</h5>
                <div class="ms-auto">
                    <div class="btn-group" role="group">
                        <button type="button" title="Previous asset" class="btn btn-sm btn-outline-primary" onclick="sendCommand('scheduler/goto/back')"><i class="bi bi-skip-backward"></i></button>
                        <button type="button" title="Reload asset" class="btn btn-sm btn-outline-primary" onclick="sendCommand('scheduler/goto', {force: true})"><i class="bi bi-arrow-clockwise"></i></button>
                        <button type="button" title="Next asset" class="btn btn-sm btn-outline-primary" onclick="sendCommand('scheduler/goto/next')"><i class="bi bi-skip-forward"></i></button>
                    </div>
                </div>
                <button class="btn btn-sm btn-primary me-2" type="button" data-bs-toggle="modal" data-bs-target="#newAssetModal"><i class="bi bi-plus-circle"></i> Add URL</button>
            </div>
            <div class="row container-fluid justify-content-center">
                <table class="table table-hover">
                    <thead class="border-bottom">
                        <tr name="asset-row">
                            <th scope="col" style="width: 2em;"></th>
                            <th scope="col">URL</th>
                            <th scope="col" style="width: 6em;">Duration</th>
                            <th scope="col" style="width: 8em;"></th>
                        </tr>
                    </thead>
                    <tbody id="asset_table"></tbody>
                </table>
            </div>
        </div>
    </div>
    {% endblock main_content %}
</main>
    
{% set ext_scripts = ['Sortable.min.js'] %}
    
{% set init_cmds = [
    'scheduler/asset',
    'scheduler/asset/current',
    'scheduler/file',
    'settings/hostname',
    'settings/default_duration'
] %}

<script>
{% block js %}
    sortable_list = Sortable.create($('#asset_table')[0], {
        onUpdate: (event) => {sendCommand('scheduler/reorder', {from: event.oldIndex, to: event.newIndex});},
        handle: ".asset-list-handle"
    });

    const asset_table = $('asset_table');
    const modal_input_url = $('modal_input_url');
    const fileSelector = $('<input type="file" multiple>')
        .on('change', () => {if (fileSelector.files.length > 0)uploadFiles(Array.from(fileSelector.files), true)});
    
    function readyStateHandler(xhttp, on_success, on_error){
        if (xhttp.readyState == 4){
            if (xhttp.status >= 200 && xhttp.status < 300) {
                if (on_success == true) location.reload();
                else if (on_success instanceof Function) on_success(xhttp.response);
            } else if (!(on_error && on_error(xhttp.response, xhttp.status))) {
                messageModal.find('.modal-title').text("Error");
                messageModal.find('.modal-body h6').text(`Request returned ${xhttp.status} (${xhttp.statusText})`);
                messageModal.find('.modal-body code').text(xhttp.response);
                new bootstrap.Modal(messageModal).show();
            }
        }
    };

    function uploadFiles(files, on_success, on_error) {
        let xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = () => readyStateHandler(xhttp, on_success, on_error);
        let formData = new FormData();
        files.forEach(file => formData.append("files", file));
        $("#upload-progress").show();
        let progressbar = byId("upload-progress-bar");
        xhttp.upload.addEventListener('progress', (event) => {
            var perc = Math.round(event.loaded / event.total * 100);
            progressbar.style = `width: ${perc}%`;
            progressbar.innerHTML = perc + "%";
            progressbar.ariaValueNow = perc;
        });
        xhttp.open("POST", "/api/scheduler/upload", true);
        xhttp.send(formData);
    }
    
    function sendCommand(target, args) {
        if(args === undefined) args = {};
        args.target = target
        ws.send(JSON.stringify(args));
    }
    
    function duration_editor(parent, uuid) {
        let oldHTML = parent.outerHTML;
        let cur_dur = parent.innerHTML;
        parent.removeAttribute('onclick');
        parent.innerHTML = `
        <div class="input-group" style="width: 10ch; max-width: 10ch;">
            <input type="number" class="form-control form-control-sm" id="update-duration" min="0" value="${cur_dur}" aria-describedby="duration-update-confirm-btn">
            <button title="Save" class="btn btn-sm btn-outline-success" type="button" onclick="sendCommand('scheduler/update_duration', {uuid: '${uuid}', duration: byId('update-duration').value});" id="duration-update-confirm-btn"><i class="bi bi-check-lg"></i></button>
        </div>
        `;
        byId('update-duration').onblur = (event) => {
            if (event.relatedTarget && event.relatedTarget.id == "duration-update-confirm-btn") return;
            parent.outerHTML = oldHTML;
        }
        byId('update-duration').focus();
    };
    
    function downloadFiles(files) {
        for (const [key, value] of Object.entries(files)) {
            var link = document.createElement("a");
            link.download = key;
            link.href = "/uploaded/" + key;
            document.body.appendChild(link);
            link.click();
            link.remove();
        };
    }
    
    checkedfiles = {};        
    function uncheckAll(){
        document.getElementsByName('filecheck').forEach(element => {element.checked = false});
        checkedfiles = {};
    }

    modal_input_url.oninput = () => sendCommand('scheduler/validate_url', {url: modal_input_url.value});
    byId('add_asset_btn').onclick = () => {
        var tmp = {items: {}};
        tmp.items[modal_input_url.value] = {duration: byId('modal_input_duration').value};
        sendCommand('scheduler/asset', tmp);
    }

    /* byId('dnd-interceptor').ondrop = event => {
        event.preventDefault();
        event.stopPropagation();

        if (event.dataTransfer.items) {
            // Use DataTransferItemList interface to access the file(s)
            event.dataTransfer.items.forEach((item, i) => {
                // If dropped items aren't files, reject them
                if (item.kind === 'file') {
                    const file = item.getAsFile();
                    console.log(`… file[${i}].name = ${file.name}`);
                }
            });
        } else {
            // Use DataTransfer interface to access the file(s)
            event.dataTransfer.files.forEach((file, i) => {
                console.log(`… file[${i}].name = ${file.name}`);
            });
        }
    } */

{% endblock js %}


{% block recv_cmds %}
case 'scheduler/asset':
    
    asset_table.innerHTML = '';
    for (var i=0; i<data.items.length; i++){
        asset_table.innerHTML += `
        <tr id="${data.items[i].uuid}" class="${(data.items[i].uuid == data.current)? 'table-active': ''}">
            <td class="align-middle asset-list-handle" style="width: 2em;"><i id="icon-${data.items[i].uuid}" class="bi bi-globe" onmouseover="this.classList.replace('bi-globe', 'bi-arrow-down-up')" onmouseout="this.classList.replace('bi-arrow-down-up', 'bi-globe')" style="color: grey;"></i></td>
            <td class="align-middle">${data.items[i].url}</td>
            <td class="align-middle" style="width: 6em;" onclick="duration_editor(this, '${data.items[i].uuid}');" name="dur_edit">${data.items[i].duration}</td>
            <td class="align-middle" style="width: 8em;">
                <div class="hstack gap-2">
                    <div class="form-check form-switch">
                        <input title="${data.items[i].enabled?'Dis':'En'}able asset" onChange="sendCommand('scheduler/set_state', {uuid: '${data.items[i].uuid}', state: ${!data.items[i].enabled}});" class="form-check-input" type="checkbox" role="switch" ${data.items[i].enabled?'checked':''}>
                    </div>
                    <div class="btn-group" role="group">
                        <button type="button" title="Delete asset" onclick="sendCommand('scheduler/delete', {uuid: '${data.items[i].uuid}'});" class="btn btn-sm btn-outline-danger"><i class="bi bi-trash"></i></button>
                        <button type="button" title="Show asset" onclick="sendCommand('scheduler/goto', {index: ${i}});" class="btn btn-sm btn-outline-secondary"><i class="bi bi-box-arrow-in-right"></i></button>
                    </div>
                </div>
            </td>
        </tr>
        `;
    }
    break;

case 'scheduler/validate_url':
    if (modal_input_url.value.length && !data.valid){
        bootstrap.Popover.getOrCreateInstance(modal_input_url, {container: 'body', content: 'Invalid url', placement: 'bottom'}).show();
        modal_input_url.className = "border border-danger border-2 form-control";
    } else {
        bootstrap.Popover.getOrCreateInstance(modal_input_url).dispose();
        modal_input_url.className = "form-control";
    }
    break;

case 'scheduler/asset/current':
    [... asset_table.children].forEach((element) => {
        element.classList.toggle('table-active', element.id == data.uuid);
    })
    break;

case 'scheduler/file':
    const list = byId('file-list');
    list.innerHTML = '';
    data.files.forEach(file => {
        list.innerHTML += `
        <li class="list-group-item list-group-item-action d-flex justify-content-between align-items-start">
            <input onclick="if (this.checked){checkedfiles['${file.filename}'] = {duration: ${file.duration_s}};} else {delete checkedfiles['${file.filename}'];}" class="form-check-input" type="checkbox" name="filecheck" value="">
            <div class="ms-2 me-auto">
                <div class="text-break">${file.filename}</div>
                <small class="text-muted">Duration: ${file.duration ?? (file.duration_s+'s')} | Size: ${file.size}</small>
            </div>
        </li>
        `;
    });
    break;

case 'settings/default_duration':
    byId('modal_input_duration').value = data.duration;
    break;

case 'settings/display/bounds':
    byId('display_bounds').innerHTML = 
        (data.bounds.width && data.bounds.height)?
            `${data.bounds.width}x${data.bounds.height}`:
            'Not connected';
    break;

case 'settings/hostname':
    document.title = 'UniTotem (' + data.hostname + ') - Manager';
    break;

case 'scheduler/asset/current':
    document.getElementsByName('asset-row').forEach(element => 
        element.classList.toggle('table-active', element.id == ('icon-' + data.uuid))
    );
    break;
{% endblock recv_cmds %}
</script>
