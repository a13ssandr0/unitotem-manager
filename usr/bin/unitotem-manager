from argparse import ArgumentParser
from copy import copy
from json import JSONDecodeError, dumps, loads
from mimetypes import MimeTypes
from multiprocessing import Pipe, Process
from multiprocessing.connection import Connection
from os import makedirs
from os.path import abspath, exists, getsize, isfile, join, normpath, realpath
from shutil import disk_usage
from subprocess import run
from sys import exit, getfilesystemencoding, path
from threading import Thread
from time import sleep, strftime, time
from traceback import format_exc
from uuid import uuid4
from zipfile import ZIP_DEFLATED, BadZipFile, ZipFile

import webview
from crontab import CronTab
from flask import Flask, render_template, request, send_file
from flask_httpauth import HTTPBasicAuth
from PIL import Image
from pymediainfo import MediaInfo
from requests import get
from unitotem_system_utils import *
from validators import url as is_valid_url
from waitress.server import create_server
from werkzeug.security import check_password_hash, generate_password_hash
from werkzeug.utils import secure_filename

VERSION = '2.3.0'

try:
    path[0].encode(getfilesystemencoding())
except UnicodeError:
    print("Unrecognizable character encoding in install path, maybe there are non UTF-8 characters in the path.")
    exit(1)

prefix = normpath(join(realpath(path[0]), '..'))
share_path = join(prefix, 'share', 'unitotem-manager')

APT_THREAD        = Thread()
AUDIO_DEVICES     = [('a', 'Auto')] + get_audio_devices()
AUTH              = HTTPBasicAuth()
CFG_DIR           = '/etc/unitotem/'
CFG_FILE          = CFG_DIR + 'unitotem.conf'
CONFIG_DEF        = {'urls': [],'default_duration': 30, 'users': {'admin': {'pass': generate_password_hash("admin")}}}
CONFIG            = copy(CONFIG_DEF)
CURRENT_ASSET     = -1
DEF_AUDIO_DEV     = get_default_audio_device()
DEF_WIFI_CARD     = get_ifaces(IF_WIRELESS)[0]
DEFAULT_AP        = None
HOSTNAME          = get_hostname()
IS_FIRST_BOOT     = False
NEXT_CHANGE_TIME  = 0
OS_VERSION        = os_version()
SEND_P:Connection = None
WWW               = Flask(__name__, static_url_path='/static', static_folder=join(share_path, 'static'), template_folder=join(share_path, 'templates'))
WWW.config['TEMPLATES_AUTO_RELOAD'] = True
WWW.config['UPLOAD_FOLDER']         = join(WWW.static_folder, 'uploaded')


def save_config():
    global CONFIG, IS_FIRST_BOOT
    with open(CFG_FILE, 'w') as conf_f:
        conf_f.write(dumps(CONFIG, indent=4))
        IS_FIRST_BOOT = False

def load_config():
    if not exists(CFG_FILE): return False
    global CONFIG
    should_update_file = False
    with open(CFG_FILE, 'r') as conf_f:
        try:
            cfg_tmp = loads(conf_f.read())
            for k, v in CONFIG.items():
                if k not in cfg_tmp:
                    cfg_tmp[k] = v
                    should_update_file = True
            CONFIG = cfg_tmp
        except JSONDecodeError:
            should_update_file = True
    if should_update_file:
        save_config()
    return True

def enabled_asset_count():
    cnt = 0
    for e in CONFIG['urls']:
        if e['enabled']:
            cnt += 1
    return cnt

def human_readable_size(size, decimal_places=2):
    for unit in ['B','KiB','MiB','GiB','TiB']:
        if size < 1024.0:
            break
        size /= 1024.0
    return f"{size:.{decimal_places}f}{unit}"

def list_resources():
    return [f for f in listdir(WWW.config['UPLOAD_FOLDER']) if isfile(join(WWW.config['UPLOAD_FOLDER'], f))]

def get_resources(name=None):
    def get_file_info(f):
        if isfile(join(WWW.config['UPLOAD_FOLDER'], f)):
            dur = ''
            dur_s = ''
            for track in MediaInfo.parse(join(WWW.config['UPLOAD_FOLDER'], f)).tracks:
                if 'other_duration' in track.to_data():
                    dur = track.to_data()['other_duration'][1]
                    dur_s = round(int(track.to_data()['duration'])/1000)
                    break
                elif 'duration' in track.to_data():
                    dur = track.to_data()['duration']
                    dur_s = round(int(dur)/1000)
                    break
            return {
                'filename': f,
                'size': human_readable_size(getsize(join(WWW.config['UPLOAD_FOLDER'], f))),
                'duration': dur,
                'duration_s': dur_s
            }

    if name:
        return get_file_info(name)
    else:
        return list(map(get_file_info, listdir(WWW.config['UPLOAD_FOLDER'])))

@WWW.route("/", methods=['GET', 'POST'])
@AUTH.login_required
def scheduler():
    return render_template('index.html', 
        ut_vers=VERSION,
        logged_user=AUTH.current_user(),
        disp_size=get_display_size(),
        disk_used=human_readable_size(disk_usage(WWW.config['UPLOAD_FOLDER']).used),
        disk_total=human_readable_size(disk_usage(WWW.config['UPLOAD_FOLDER']).total),
        urls_list=CONFIG['urls'],
        default_duration=CONFIG['default_duration'],
        files_list=get_resources()
    )

@WWW.route("/settings", methods=['GET', 'POST'])
@AUTH.login_required
def settings():
    return render_template('settings.html',
        ut_vers = VERSION,
        logged_user = AUTH.current_user(),
        disp_size=get_display_size(),
        disk_used=human_readable_size(disk_usage(WWW.config['UPLOAD_FOLDER']).used),
        disk_total=human_readable_size(disk_usage(WWW.config['UPLOAD_FOLDER']).total),
        upd = get_upd_count(),
        is_updating = APT_THREAD.name == 'update' and APT_THREAD.is_alive(),
        is_upgrading = APT_THREAD.name == 'upgrade' and APT_THREAD.is_alive(),
        hostname = HOSTNAME,
        netplan_config = {fname.removesuffix('.yaml'): get_netplan_file(fname) for fname in get_netplan_file_list()},
        default_duration = CONFIG['default_duration'],
        audio = AUDIO_DEVICES,
        def_audio_dev = DEF_AUDIO_DEV,
        crontab = [job for job in CronTab(user='root').crons if job.comment.startswith('unitotem:-)')],
        def_wifi = DEF_WIFI_CARD
    )

@WWW.route("/backup", methods=['GET', 'POST', 'DELETE'])
@AUTH.login_required
def backup_handler():
    global CONFIG, IS_FIRST_BOOT,CURRENT_ASSET, NEXT_CHANGE_TIME
    try:
        if request.method == 'GET':
            zip_buffer = BytesIO()

            config_backup = {
                "version": VERSION,
                "CONFIG": CONFIG,
                "hostname": get_hostname(),
                "def_audio_dev": get_default_audio_device(),
                "netplan": {fname: get_netplan_file(fname) for fname in get_netplan_file_list()}
            }

            with ZipFile(zip_buffer, 'w', ZIP_DEFLATED, False) as zip_file:
                zip_file.writestr("config.json", dumps(config_backup))
                if "include_uploaded" in request.args:
                    for file_name in list_resources():
                        zip_file.write(join(WWW.config['UPLOAD_FOLDER'], file_name), "uploaded/" + file_name)
            
            zip_buffer.seek(0)
            return send_file(zip_buffer, mimetype='application/zip', download_name=strftime('unitotem-manager-%Y%m%d-%H%M%S.zip'))

        elif request.method == 'POST':
            if 'data_zip_file' in request.files and (request.files['data_zip_file'].mimetype == 'application/octet-stream' or request.files['data_zip_file'].mimetype == 'application/zip'):
                with ZipFile(request.files['data_zip_file'].stream._file) as zip_file:
                    files = zip_file.namelist()
                    if 'config.json' in files:
                        config_json = loads(zip_file.read('config.json'))
                        options_json = loads(request.form['options'])
                        if 'CONFIG' in config_json and options_json.get('CONFIG', True):
                            CONFIG = config_json['CONFIG']
                            CURRENT_ASSET    = -1
                            IS_FIRST_BOOT    = True
                            NEXT_CHANGE_TIME = 0
                            save_config()
                        if 'hostname' in config_json and options_json.get('hostname', True):
                            set_hostname(config_json['hostname'])
                        if 'def_audio_dev' in config_json and options_json.get('def_audio_dev', True):
                            set_audio_device(config_json['def_audio_dev'])
                        if 'netplan' in config_json and options_json.get('netplan', True):
                            res = set_netplan(filename = None, file_content=config_json['netplan'])
                    if options_json.get('uploaded', True):
                        for file in files:
                            if file.startswith('uploaded/'):
                                zip_file.extract(file, normpath(join(WWW.config['UPLOAD_FOLDER'], '..')))
                    return (res + '\n', 422) if 'res' in locals() else ('', 204)
            else:
                return ('No file or too many files provided' if not len(request.files)==1 else f'Wrong mimetype: {request.files["data_zip_file"].mimetype}') + '\n', 400
            

        elif request.method == 'DELETE':
            if isfile(CFG_FILE): removefile(CFG_FILE)
            if isfile(ASOUND_CONF): removefile(ASOUND_CONF)
            for res in list_resources(): removefile(join(WWW.config['UPLOAD_FOLDER'], res))
            CONFIG           = copy(CONFIG_DEF)
            CURRENT_ASSET    = -1
            IS_FIRST_BOOT    = True
            NEXT_CHANGE_TIME = 0
            return '', 204
    
    except BadZipFile:
        return format_exc(), 400
    except Exception:
        return format_exc(), 500



@WWW.route("/api", methods=['GET', 'POST'])
@AUTH.login_required
def main_controller():
    try:
        if request.method == 'POST' and request.files:
            # check if the post request has the file part
            for file in request.files.values():
                if file and file.filename:
                    file.save(join(WWW.config['UPLOAD_FOLDER'], secure_filename(file.filename)), buffer_size=64 * 1024 * 1024)
                    file_data = get_resources(secure_filename(file.filename))
                    handle_api({'add_asset': {file_data['filename']: {'duration': file_data['duration_s']}}})
            return '', 201 # created

        return handle_api(request.json if request.is_json else dict(request.args))

    except Exception:
        return format_exc(), 500


def handle_api(request_data):
    global NEXT_CHANGE_TIME, CURRENT_ASSET, CONFIG, IS_FIRST_BOOT, APT_THREAD
    
    response = ['', 0]

    if 'reboot' in request_data:
        run('/usr/sbin/reboot')
        response[1] = 202 # accepted

    elif 'shutdown' in request_data:
        run('/usr/sbin/poweroff')
        response[1] = 202 # accepted

    elif 'add_asset' in request_data:
        save = False
        for element, attrs in request_data['add_asset'].items():
            if is_valid_url(element) or element in list_resources():
                CONFIG['urls'].append({
                    'url': ('file:' if element in list_resources() else '') + element,
                    'duration': int(attrs.get('duration', '') or CONFIG['default_duration']),
                    'enabled': bool(attrs.get('enabled', False))
                })
                save = True
            else: response[1] = 406 # not acceptable
        if save: save_config()

    elif 'set-state' in request_data:
        for index, elem in enumerate(CONFIG['urls']):
            if request_data['url'] == elem['url']:
                start_rotation = not enabled_asset_count()
                CONFIG['urls'][index]['enabled'] = 'enabled' in request_data['set-state']
                save_config()
                if start_rotation:
                    webview_goto(0)
                elif index == CURRENT_ASSET:
                    NEXT_CHANGE_TIME = 0
                break

    elif 'update-duration' in request_data:
        for index, elem in enumerate(CONFIG['urls']):
            if request_data['url'] == elem['url']:
                old_dur = CONFIG['urls'][index]['duration']
                CONFIG['urls'][index]['duration'] = int(request_data['update-duration'])
                save_config()
                if index == CURRENT_ASSET:
                    NEXT_CHANGE_TIME += (CONFIG['urls'][index]['duration'] or float('inf')) - old_dur
                break

    elif 'delete' in request_data:
        for elem_n in range(len(CONFIG['urls'])):
            if request_data['delete'] == CONFIG['urls'][elem_n]['url']:
                try:
                    if CONFIG['urls'][CURRENT_ASSET]['url'] == CONFIG['urls'][elem_n]['url']:
                        NEXT_CHANGE_TIME = 0
                finally:
                    CONFIG['urls'].pop(elem_n)
                    save_config()
                    break

    elif 'delete_file' in request_data:
        for file in request_data['delete_file']:
            if exists(join(WWW.config['UPLOAD_FOLDER'], file)):
                handle_api({'delete': 'file:' + file})
                removefile(join(WWW.config['UPLOAD_FOLDER'], file))

    elif 'goto' in request_data:
        webview_goto(int(request_data['goto']), force=True)

    elif 'reorder' in request_data:
        CONFIG['urls'].insert(int(request_data['to']), CONFIG['urls'].pop(int(request_data['reorder'])))
        save_config()
        if CURRENT_ASSET == int(request_data['to']) or CURRENT_ASSET == int(request_data['reorder']):
            webview_goto()

    elif 'back' in request_data:
        webview_goto(CURRENT_ASSET-1, backwards=True)

    elif 'refresh' in request_data:
        webview_goto()

    elif 'next' in request_data:
        webview_goto(CURRENT_ASSET+1)

    elif 'set_def_duration' in request_data:
        CONFIG['default_duration'] = int(request_data['set_def_duration'])
        save_config()

    elif 'update' in request_data:
        if not APT_THREAD.is_alive():
            APT_THREAD = Thread(target=apt_update, name='update')
            APT_THREAD.start()

    elif 'update_count' in request_data:
        response[0] = str(get_upd_count())

    elif 'upgrade' in request_data:
        if not APT_THREAD.is_alive():
            APT_THREAD = Thread(target=apt_upgrade, name='upgrade')
            APT_THREAD.start()

    elif 'is_updating' in request_data:
        response[0] = dumps(APT_THREAD.name == 'update' and APT_THREAD.is_alive())

    elif 'is_upgrading' in request_data:
        response[0] = dumps(APT_THREAD.name == 'upgrade' and APT_THREAD.is_alive())

    elif 'set_passwd' in request_data:
        CONFIG['users'][AUTH.current_user()]['pass'] = generate_password_hash(request_data['set_passwd'])
        save_config()

    elif 'audio_out' in request_data:
        set_audio_device(request_data['audio_out'])

    elif 'set_hostname' in request_data:
        set_hostname(request_data['set_hostname'])

    elif 'get_wifis' in request_data:
        response[0] = dumps(get_wifis())

    elif 'set_netplan_conf' in request_data:
        if request_data['set_netplan_conf']:
            res = set_netplan(secure_filename(request_data['set_netplan_conf']), request_data['content'], request_data.get('apply', True))
        else:
            res = generate_netplan(request_data.get('apply', True))
        if res == True:
            if DEFAULT_AP and do_ip_addr(True): #AP is still enabled but now we are connected, AP is no longer needed
                stop_hostpot()
                IS_FIRST_BOOT = False
                NEXT_CHANGE_TIME = 0
                webview_goto(0)
        elif isinstance(res, str):
            response = [res, 422] # unprocessable entity

    elif 'get_netplan_conf' in request_data:
        netplan_files = get_netplan_file_list()
        if request_data['get_netplan_conf']:
            if request_data['get_netplan_conf'] in netplan_files:
                response[0] = dumps({request_data['get_netplan_conf']: get_netplan_file(request_data['get_netplan_conf'])})
        else:
            response[0] = dumps({f: get_netplan_file(f) for f in netplan_files})

    elif 'new_netplan_conf' in request_data:
        create_netplan(request_data['new_netplan_conf'])

    elif 'del_netplan_conf' in request_data:
        res = del_netplan_file(request_data['del_netplan_conf'], request_data.get('apply', True))
        if isinstance(res, str):
            response = [res, 422] # unprocessable entity

    elif 'schedule' in request_data:
        if request_data['schedule'] in ['pwr', 'reb'] and 'm' in request_data and 'h' in request_data and 'dom' in request_data and 'mon' in request_data and 'dow' in request_data:
            with CronTab(user='root') as crontab:
                crontab.new('/usr/sbin/' + ('poweroff' if request_data['schedule'] == 'pwr' else 'reboot'), 'unitotem:-)' + str(uuid4())).setall(' '.join([request_data['m'],request_data['h'],request_data['dom'],request_data['mon'],request_data['dow']]))

    elif 'set_job_state' in request_data:
        with CronTab(user='root') as crontab:
            list(crontab.find_comment(request_data['job']))[0].enable('enabled' in request_data['set_job_state'])

    elif 'remove_schedule' in request_data:
        with CronTab(user='root') as crontab:
            crontab.remove_all(comment=request_data['remove_schedule'])

    elif 'edit_schedule' in request_data:
        with CronTab(user='root') as crontab:
            job = list(crontab.find_comment(request_data['edit_schedule']))[0]
            if 'm' in request_data and 'h' in request_data and 'dom' in request_data and 'mon' in request_data and 'dow' in request_data:
                job.setall(' '.join(request_data['m'],request_data['h'],request_data['dom'],request_data['mon'],request_data['dow']))
            if request_data.get('cmd', '') in ['pwr', 'reb']:
                job.set_command('poweroff' if request_data['cmd'] == 'pwr' else 'reboot')

    else:
        response = [dumps(request_data, indent=4), 404]

    if response[1] == 0:
        response[1] = 200 if response[0] else 204

    if response[0].strip() and not response[0].endswith('\n'):
        response[0] += '\n'

    return tuple(response)


@WWW.route("/unitotem-no-assets")
def no_assets_page():
    ip = do_ip_addr(get_default=True)
    return render_template('no-assets.html',
        ut_vers=VERSION,
        os_vers=OS_VERSION,
        ip_addr=ip['addr'][0]['addr'] if ip else None,
        hostname=HOSTNAME
    )

@WWW.route("/unitotem-first-boot")
def first_boot_page():
    ip = do_ip_addr(get_default=True)
    return render_template('first-boot.html',
        ut_vers=VERSION,
        os_vers=OS_VERSION,
        ip_addr=ip['addr'][0]['addr'] if ip else None,
        hostname=HOSTNAME,
        wifi=DEFAULT_AP
    )

@AUTH.verify_password
def verify_password(username, password):
    if username in CONFIG['users'] and check_password_hash(CONFIG['users'][username]['pass'], password):
        return username

def media_gen_url(input_url:str):
    if input_url.startswith('file:'):
        file = input_url = abspath(join(WWW.config['UPLOAD_FOLDER'], input_url.removeprefix('file:')))
        mime = MimeTypes().guess_type(input_url)[0]
    else:
        remote_file = get(input_url, stream=True)
        mime = remote_file.headers['Content-Type'].split(';')[0]
        file = remote_file.raw
    
    dom_col = '000000'
    if mime.startswith('image'):
        with Image.open(file) as img:
            dom_col = get_dominant_color(img).removeprefix('0x')
    generated = {'url': input_url}
    if (mime.startswith('video') or mime.startswith('image')):
        generated['type'] = mime
        generated['color'] = dom_col
    return generated

def webview_goto(asset: int = CURRENT_ASSET, force: bool = False, backwards: bool = False):
    global NEXT_CHANGE_TIME, CURRENT_ASSET, CONFIG
    if 0 <= asset < len(CONFIG['urls']):
        if CONFIG['urls'][asset]['enabled'] or force:
            CURRENT_ASSET = asset
            send_to_pipe(**media_gen_url(CONFIG['urls'][CURRENT_ASSET]['url']), wait_loaded=True)
            NEXT_CHANGE_TIME = int(time()) + (CONFIG['urls'][CURRENT_ASSET]['duration'] or float('inf'))
        else:
            webview_goto(asset + (-1 if backwards else 1))


def main_ui(pipe:Connection):
    def update_page(window:webview.Window):
        while True:
            data:dict = pipe.recv()
            window.load_url(data['url'])
            if 'type' in data:
                # wait a little time for the document to load the base elements
                sleep(0.01)
                window.evaluate_js(r'document.body.style.background = "#' + data.get("color", "000000") + '"')
                if data['type'].startswith('video'):
                    window.evaluate_js(r"""
                        var video = document.getElementsByTagName("video")[0];
                        video.removeAttribute("controls");
                        video.removeAttribute("class");
                        video.style=`
                            display: block !important;
                            position: absolute !important;
                            height: 100% !important;
                            width: 100% !important;
                            margin: auto !important;
                            top: 50% !important;
                            left: 50% !important;
                            transform: translate(-50%, -50%) !important;
                            object-fit: contain !important;
                            user-select: none !important;
                        `;
                    """)
                elif data['type'].startswith('image'):
                    window.evaluate_js(r"""
                        var img = document.getElementsByTagName("img")[0];
                        img.style=`
                            display: block !important;
                            position: absolute !important;
                            height: 100% !important;
                            width: 100% !important;
                            margin: auto !important;
                            top: 50% !important;
                            left: 50% !important;
                            transform: translate(-50%, -50%) !important;
                            object-fit: contain !important;
                            user-select: none !important;
                        `;
                    """)

    window = webview.create_window(
        title='', url=join(WWW.template_folder, 'boot-screen.html'),
        x=0, y=0, width=webview.screens[0].width, height=webview.screens[0].height,
        resizable=False, frameless=True, fullscreen=True, background_color='#000000'
    )
    window.events.loaded += lambda: pipe.send(True)
    webview.start(func=update_page, args=window, gui='gtk', debug=True)


def send_to_pipe(url=None, wait_loaded=False, **kwargs):
    if url: kwargs['url'] = url
    SEND_P.send(kwargs)
    if wait_loaded:
        SEND_P.recv()


def webview_control_main():
    global NEXT_CHANGE_TIME, CURRENT_ASSET, CONFIG
    while(True):
        if time()>=NEXT_CHANGE_TIME+1:
            if IS_FIRST_BOOT:
                NEXT_CHANGE_TIME = float('inf')
                send_to_pipe('http://localhost:5000/unitotem-first-boot')
            elif not enabled_asset_count():
                NEXT_CHANGE_TIME = float('inf')
                send_to_pipe('http://localhost:5000/unitotem-no-assets')
            else:
                CURRENT_ASSET += 1
                if CURRENT_ASSET >= len(CONFIG['urls']): CURRENT_ASSET = 0
                webview_goto(CURRENT_ASSET)
        sleep(1)


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument('--version', action='version', version='%(prog)s ' + VERSION)
    cmdargs = vars(parser.parse_args())

    recv_p, SEND_P = Pipe()
    p = Process(target=main_ui, args=(recv_p,), daemon=True)
    p.start()

    makedirs(WWW.config['UPLOAD_FOLDER'], exist_ok=True)
    makedirs(CFG_DIR, exist_ok=True)
    
    IS_FIRST_BOOT = not load_config()

    if IS_FIRST_BOOT:
        print('First boot or no configuration file found.')

    if IS_FIRST_BOOT and (not do_ip_addr(True) or exists(FALLBACK_AP_FILE)):
        # config file doesn't exist and we are not connected, maybe it's first boot
        hotspot = start_hotspot()
        DEFAULT_AP = dict(ssid=hotspot[0], password = hotspot[1], qrcode = wifi_qr(hotspot[0], hotspot[1]))
        print(f'Not connected to any network, started fallback hotspot {hotspot[0]} with password {hotspot[1]}.')

    if not APT_THREAD.is_alive():
        APT_THREAD = Thread(target=apt_update, name='update')
        APT_THREAD.start()

    Thread(target=webview_control_main, daemon=True).start()

    server = create_server(WWW, listen='*:5000')
    server.run()

    p.terminate()
    stop_hostpot()
